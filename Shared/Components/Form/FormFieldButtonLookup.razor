@namespace IFinancing360_UI.Components
@typeparam TLookup
@inherits FormField<string>

<FormField TValue="string" Name="@Name" Size="Size" Visible="@Visible" Disabled="@Disabled" Required="@Required"
  Style="@Style" Label="@Label">
  <RadzenStack Orientation="Orientation.Horizontal" Gap="4" AlignItems="AlignItems.Start">
    <RadzenButton Click="@(args => {
			Click.InvokeAsync(args);
			Target.Open();
			})" Style="@($"display: inline-block; width:fit-content; {Style}")" Icon="@(Icon ?? "pageview")"
      ButtonStyle="@ButtonStyle" Disabled=Disabled Size="ButtonSize" IconColor="@IconColor"
      class="rz-border-radius-2" />
    @if (Value != null)
    {
      @if (TextTemplate == null)
      {
        <RadzenText Text="@Text" TextStyle="TextStyle.Body1" title="@Text" Style="margin-left: 4px;" />
      }
      else
      {
        @TextTemplate
      }
    }

    @if (Value != null && !Disabled && !Required)
    {
      <RadzenIcon Icon="close" Style="cursor: pointer; color: var(--rz-danger);" title="Click to clear"
        @onclick="@(Reset)" />
    }
  </RadzenStack>



  <RadzenTextBox Name="@Name" Value=@Value ValueChanged="(value) => {
			Value = value;
			ValueChanged.InvokeAsync(value);
		}" Change="Change" Disabled="@Disabled" Visible="@ShowInput" style="width: 100%; margin-top: 4px;"
    ValueExpression="ValueExpression" Attributes="Attributes" />
</FormField>

@code {
  [Parameter] public LookupModal<TLookup> Target { get; set; } = new();

  [Parameter] public bool ShowInput { get; set; } = false;

  [Parameter] public string? Text { get; set; }
  [Parameter] public RenderFragment? TextTemplate { get; set; }
  [Parameter] public EventCallback<string> TextChanged { get; set; }

  [Parameter] public ButtonSize ButtonSize { get; set; } = ButtonSize.Small;
  [Parameter] public EventCallback<MouseEventArgs> Click { get; set; }
  [Parameter] public string? Icon { get; set; }
  [Parameter] public ButtonStyle ButtonStyle { get; set; }
  [Parameter] public string? IconColor { get; set; }

  void Reset()
  {
    if (ValueChanged.HasDelegate)
    {
      ValueChanged.InvokeAsync(null);
    }
    else
    {
      Value = null;
    }

    if (TextChanged.HasDelegate)
    {
      TextChanged.InvokeAsync(null);
    }
    else
    {
      Text = null;
    }
  }

}
